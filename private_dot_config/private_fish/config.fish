# -='cd -'
# ...=../..
# ....=../../..
# .....=../../../..
# ......=../../../../..
# 1='cd -1'
# 2='cd -2'
# 3='cd -3'
# 4='cd -4'
# 5='cd -5'
# 6='cd -6'
# 7='cd -7'
# 8='cd -8'
# 9='cd -9'
# _='sudo '
# ad=ansible-doc
# agrep='alias | grep -i'
# al=ansible-lint
# anvim='NVIM_APPNAME="astronvim" nvim'
# ap=ansible-playbook
# avd='ansible-vault decrypt'
# ave='ansible-vault edit'
# avv='ansible-vault view'
# bin='python -c '\''import sys; print(bin(int(sys.argv[1])))'\'
# ch=chezmoi
# cht='~/bin/cht.sh'
# chx='chmod +x'
# cp='nocorrect cp'
# dbl='docker build'
# dcb='docker compose build'
# dcdn='docker compose down'
# dce='docker compose exec'
# dcin='docker container inspect'
# dck='docker compose kill'
# dcl='docker compose logs'
# dclF='docker compose logs -f --tail 0'
# dclf='docker compose logs -f'
# dcls='docker container ls'
# dclsa='docker container ls -a'
# dco='docker compose'
# dcps='docker compose ps'
# dcpull='docker compose pull'
# dcr='docker compose run'
# dcrestart='docker compose restart'
# dcrm='docker compose rm'
# dcstart='docker compose start'
# dcstop='docker compose stop'
# dcup='docker compose up'
# dcupb='docker compose up --build'
# dcupd='docker compose up -d'
# dcupdb='docker compose up -d --build'
# dib='docker image build'
# digs='dig +noall +answer'
# dii='docker image inspect'
# dils='docker image ls'
# dipru='docker image prune -a'
# dipu='docker image push'
# dirm='docker image rm'
# dit='docker image tag'
# dlo='docker container logs'
# dnc='docker network create'
# dncn='docker network connect'
# dndcn='docker network disconnect'
# dni='docker network inspect'
# dnls='docker network ls'
# dnrm='docker network rm'
# dpo='docker container port'
# dps='docker ps --format "{{.Names}}\t{{.ID}}\t{{.State}}\t{{.Status}}" | column -t'
# dpsa='docker ps -a'
# dpu='docker pull'
# dr='docker container run'
# drit='docker container run -it'
# drm='docker container rm'
# 'drm!'='docker container rm -f'
# drs='docker container restart'
# dst='docker container start'
# dsta='docker stop $(docker ps -q)'
# dstp='docker container stop'
# dsts='docker stats'
# dtop='docker top'
# dvi='docker volume inspect'
# dvls='docker volume ls'
# dvprune='docker volume prune'
# dxc='docker container exec'
# dxcit='docker container exec -it'
# egrep='grep -E'
# ezsh='vim ~/.zshrc'
# fgrep='grep -F'
# fixmerge='git diff --name-only | uniq | xargs nvim'
# g=git
# ga='git add'
# gaa='git add --all'
# gam='git am'
# gama='git am --abort'
# gamc='git am --continue'
# gams='git am --skip'
# gamscp='git am --show-current-patch'
# gap='git apply'
# gapa='git add --patch'
# gapt='git apply --3way'
# gau='git add --update'
# gav='git add --verbose'
# gb='git branch'
# gbD='git branch --delete --force'
# gba='git branch --all'
# gbd='git branch --delete'
# gbg='LANG=C git branch -vv | grep ": gone\]"'
# gbgD='LANG=C git branch --no-color -vv | grep ": gone\]" | cut -c 3- | awk '\''{print $1}'\'' | xargs git branch -D'
# gbgd='LANG=C git branch --no-color -vv | grep ": gone\]" | cut -c 3- | awk '\''{print $1}'\'' | xargs git branch -d'
# gbl='git blame -w'
# gbm='git branch --move'
# gbnm='git branch --no-merged'
# gbr='git branch --remote'
# gbs='git bisect'
# gbsb='git bisect bad'
# gbsg='git bisect good'
# gbsn='git bisect new'
# gbso='git bisect old'
# gbsr='git bisect reset'
# gbss='git bisect start'
# gc='git commit --verbose'
# 'gc!'='git commit --verbose --amend'
# gcB='git checkout -B'
# gca='git commit --verbose --all'
# 'gca!'='git commit --verbose --all --amend'
# gcam='git commit --all --message'
# 'gcan!'='git commit --verbose --all --no-edit --amend'
# 'gcann!'='git commit --verbose --all --date=now --no-edit --amend'
# 'gcans!'='git commit --verbose --all --signoff --no-edit --amend'
# gcas='git commit --all --signoff'
# gcasm='git commit --all --signoff --message'
# gcb='git checkout -b'
# gcd='git checkout $(git_develop_branch)'
# gcf='git config --list'
# gcfu='git commit --fixup'
# gcl='git clone --recurse-submodules'
# gclean='git clean --interactive -d'
# gclf='git clone --recursive --shallow-submodules --filter=blob:none --also-filter-submodules'
# gcm='git checkout $(git_main_branch)'
# gcmsg='git commit --message'
# gcn='git commit --verbose --no-edit'
# 'gcn!'='git commit --verbose --no-edit --amend'
# gco='git checkout'
# gcor='git checkout --recurse-submodules'
# gcount='git shortlog --summary --numbered'
# gcp='git cherry-pick'
# gcpa='git cherry-pick --abort'
# gcpc='git cherry-pick --continue'
# gcs='git commit --gpg-sign'
# gcsm='git commit --signoff --message'
# gcss='git commit --gpg-sign --signoff'
# gcssm='git commit --gpg-sign --signoff --message'
# gd='git diff'
# gdca='git diff --cached'
# gdct='git describe --tags $(git rev-list --tags --max-count=1)'
# gdcw='git diff --cached --word-diff'
# gdh='git diff HEAD^'
# gdm='git diff main'
# gds='git diff --staged'
# gdt='git diff-tree --no-commit-id --name-only -r'
# gdup='git diff @{upstream}'
# gdw='git diff --word-diff'
# gf='git fetch'
# gfa='git fetch --all --tags --prune --jobs=10'
# gfg='git ls-files | grep'
# gfo='git fetch origin'
# gg='git gui citool'
# gga='git gui citool --amend'
# ggpull='git pull origin "$(git_current_branch)"'
# ggpur=ggu
# ggpush='git push origin "$(git_current_branch)"'
# ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'
# ghh='git help'
# gignore='git update-index --assume-unchanged'
# gignored='git ls-files -v | grep "^[[:lower:]]"'
# git-svn-dcommit-push='git svn dcommit && git push github $(git_main_branch):svntrunk'
# gk='\gitk --all --branches &!'
# gke='\gitk --all $(git log --walk-reflogs --pretty=%h) &!'
# gl='git pull'
# glg='git log --stat'
# glgg='git log --graph'
# glgga='git log --graph --decorate --all'
# glgm='git log --graph --max-count=10'
# glgp='git log --stat --patch'
# glo='git log --oneline --decorate'
# globurl='noglob urlglobber '
# glod='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset"'
# glods='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset" --date=short'
# glog='git log --oneline --decorate --graph'
# gloga='git log --oneline --decorate --graph --all'
# glol='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset"'
# glola='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --all'
# glols='git log --graph --pretty="%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" --stat'
# glp=_git_log_prettily
# gluc='git pull upstream $(git_current_branch)'
# glum='git pull upstream $(git_main_branch)'
# gm='git merge'
# gma='git merge --abort'
# gmc='git merge --continue'
# gmff='git merge --ff-only'
# gmom='git merge origin/$(git_main_branch)'
# gms='git merge --squash'
# gmtl='git mergetool --no-prompt'
# gmtlvim='git mergetool --no-prompt --tool=vimdiff'
# gmum='git merge upstream/$(git_main_branch)'
# gp='git push'
# gpd='git push --dry-run'
# gpf='git push --force-with-lease --force-if-includes'
# 'gpf!'='git push --force'
# gpoat='git push origin --all && git push origin --tags'
# gpod='git push origin --delete'
# gpr='git pull --rebase'
# gpra='git pull --rebase --autostash'
# gprav='git pull --rebase --autostash -v'
# gpristine='git reset --hard && git clean --force -dfx'
# gprom='git pull --rebase origin $(git_main_branch)'
# gpromi='git pull --rebase=interactive origin $(git_main_branch)'
# gprum='git pull --rebase upstream $(git_main_branch)'
# gprumi='git pull --rebase=interactive upstream $(git_main_branch)'
# gprv='git pull --rebase -v'
# gpsup='git push --set-upstream origin $(git_current_branch)'
# gpsupf='git push --set-upstream origin $(git_current_branch) --force-with-lease --force-if-includes'
# gpu='git push upstream'
# gpv='git push --verbose'
# gr='git remote'
# gra='git remote add'
# grb='git rebase'
# grba='git rebase --abort'
# grbc='git rebase --continue'
# grbd='git rebase $(git_develop_branch)'
# grbi='git rebase --interactive'
# grbm='git rebase $(git_main_branch)'
# grbo='git rebase --onto'
# grbom='git rebase origin/$(git_main_branch)'
# grbs='git rebase --skip'
# grbum='git rebase upstream/$(git_main_branch)'
# grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox,.venv,venv}'
# grev='git revert'
# greva='git revert --abort'
# grevc='git revert --continue'
# grf='git reflog'
# grh='git reset'
# grhh='git reset --hard'
# grhk='git reset --keep'
# grhs='git reset --soft'
# grm='git rm'
# grmc='git rm --cached'
# grmv='git remote rename'
# groh='git reset origin/$(git_current_branch) --hard'
# grrm='git remote remove'
# grs='git restore'
# grset='git remote set-url'
# grss='git restore --source'
# grst='git restore --staged'
# grt='cd "$(git rev-parse --show-toplevel || echo .)"'
# gru='git reset --'
# grup='git remote update'
# grv='git remote --verbose'
# gs='git status'
# gsb='git status --short --branch'
# gsd='git svn dcommit'
# gsh='git show'
# gsi='git submodule init'
# gsps='git show --pretty=short --show-signature'
# gsr='git svn rebase'
# gss='git status --short'
# gst='git status'
# gsta='git stash push'
# gstaa='git stash apply'
# gstall='git stash --all'
# gstc='git stash clear'
# gstd='git stash drop'
# gstl='git stash list'
# gstp='git stash pop'
# gsts='git stash show --patch'
# gstu='gsta --include-untracked'
# gsu='git submodule update'
# gswc='git switch --create'
# gswd='git switch $(git_develop_branch)'
# gswm='git switch $(git_main_branch)'
# gta='git tag --annotate'
# gtl='gtl(){ git tag --sort=-v:refname -n --list "${1}*" }; noglob gtl'
# gts='git tag --sign'
# gtv='git tag | sort -V'
# gunignore='git update-index --no-assume-unchanged'
# gunwip='git rev-list --max-count=1 --format="%s" HEAD | grep -q "\--wip--" && git reset HEAD~1'
# gup=$'\n    print -Pu2 "%F{yellow}[oh-my-zsh] \'%F{red}gup%F{yellow}\' is a deprecated alias, using \'%F{green}gpr%F{yellow}\' instead.%f"\n    gpr'
# gupa=$'\n    print -Pu2 "%F{yellow}[oh-my-zsh] \'%F{red}gupa%F{yellow}\' is a deprecated alias, using \'%F{green}gpra%F{yellow}\' instead.%f"\n    gpra'
# gupav=$'\n    print -Pu2 "%F{yellow}[oh-my-zsh] \'%F{red}gupav%F{yellow}\' is a deprecated alias, using \'%F{green}gprav%F{yellow}\' instead.%f"\n    gprav'
# gupom=$'\n    print -Pu2 "%F{yellow}[oh-my-zsh] \'%F{red}gupom%F{yellow}\' is a deprecated alias, using \'%F{green}gprom%F{yellow}\' instead.%f"\n    gprom'
# gupomi=$'\n    print -Pu2 "%F{yellow}[oh-my-zsh] \'%F{red}gupomi%F{yellow}\' is a deprecated alias, using \'%F{green}gpromi%F{yellow}\' instead.%f"\n    gpromi'
# gupv=$'\n    print -Pu2 "%F{yellow}[oh-my-zsh] \'%F{red}gupv%F{yellow}\' is a deprecated alias, using \'%F{green}gprv%F{yellow}\' instead.%f"\n    gprv'
# gwch='git whatchanged -p --abbrev-commit --pretty=medium'
# gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign --message "--wip-- [skip ci]"'
# gwipe='git reset --hard && git clean --force -df'
# gwt='git worktree'
# gwta='git worktree add'
# gwtls='git worktree list'
# gwtmv='git worktree move'
# gwtrm='git worktree remove'
# hex='python -c '\''import sys; print(hex(int(sys.argv[1])))'\'
# hgrep='history | grep -i'
# history='omz_history -i'
# http=curlie
# imgcat=/Users/aj/.iterm2/imgcat
# imgls=/Users/aj/.iterm2/imgls
# it2api=/Users/aj/.iterm2/it2api
# it2attention=/Users/aj/.iterm2/it2attention
# it2check=/Users/aj/.iterm2/it2check
# it2copy=/Users/aj/.iterm2/it2copy
# it2dl=/Users/aj/.iterm2/it2dl
# it2getvar=/Users/aj/.iterm2/it2getvar
# it2git=/Users/aj/.iterm2/it2git
# it2profile=/Users/aj/.iterm2/it2profile
# it2setcolor=/Users/aj/.iterm2/it2setcolor
# it2setkeylabel=/Users/aj/.iterm2/it2setkeylabel
# it2tip=/Users/aj/.iterm2/it2tip
# it2ul=/Users/aj/.iterm2/it2ul
# it2universion=/Users/aj/.iterm2/it2universion
# k=kubectl
# kaf='kubectl apply -f'
# kca='_kca(){ kubectl "$@" --all-namespaces;  unset -f _kca; }; _kca'
# kccc='kubectl config current-context'
# kcdc='kubectl config delete-context'
# kcgc='kubectl config get-contexts'
# kcn='kubectl config set-context --current --namespace'
# kcp='kubectl cp'
# kcsc='kubectl config set-context'
# kcuc='kubectl config use-context'
# kdcj='kubectl describe cronjob'
# kdcm='kubectl describe configmap'
# kdd='kubectl describe deployment'
# kdds='kubectl describe daemonset'
# kdel='kubectl delete'
# kdelcj='kubectl delete cronjob'
# kdelcm='kubectl delete configmap'
# kdeld='kubectl delete deployment'
# kdelds='kubectl delete daemonset'
# kdelf='kubectl delete -f'
# kdeli='kubectl delete ingress'
# kdelj='kubectl delete job'
# kdelno='kubectl delete node'
# kdelns='kubectl delete namespace'
# kdelp='kubectl delete pods'
# kdelpvc='kubectl delete pvc'
# kdels='kubectl delete svc'
# kdelsa='kubectl delete sa'
# kdelsec='kubectl delete secret'
# kdelss='kubectl delete statefulset'
# kdi='kubectl describe ingress'
# kdj='kubectl describe job'
# kdno='kubectl describe node'
# kdns='kubectl describe namespace'
# kdp='kubectl describe pods'
# kdpvc='kubectl describe pvc'
# kdrs='kubectl describe replicaset'
# kds='kubectl describe svc'
# kdsa='kubectl describe sa'
# kdsec='kubectl describe secret'
# kdss='kubectl describe statefulset'
# kecj='kubectl edit cronjob'
# kecm='kubectl edit configmap'
# ked='kubectl edit deployment'
# keds='kubectl edit daemonset'
# kei='kubectl edit ingress'
# kej='kubectl edit job'
# keno='kubectl edit node'
# kens='kubectl edit namespace'
# kep='kubectl edit pods'
# kepvc='kubectl edit pvc'
# kers='kubectl edit replicaset'
# kes='kubectl edit svc'
# kess='kubectl edit statefulset'
# keti='kubectl exec -t -i'
# kga='kubectl get all'
# kgaa='kubectl get all --all-namespaces'
# kgcj='kubectl get cronjob'
# kgcm='kubectl get configmaps'
# kgcma='kubectl get configmaps --all-namespaces'
# kgd='kubectl get deployment'
# kgda='kubectl get deployment --all-namespaces'
# kgds='kubectl get daemonset'
# kgdsa='kubectl get daemonset --all-namespaces'
# kgdsw='kgds --watch'
# kgdw='kgd --watch'
# kgdwide='kgd -o wide'
# kge='kubectl get events --sort-by=".lastTimestamp"'
# kgew='kubectl get events --sort-by=".lastTimestamp" --watch'
# kgi='kubectl get ingress'
# kgia='kubectl get ingress --all-namespaces'
# kgj='kubectl get job'
# kgno='kubectl get nodes'
# kgnosl='kubectl get nodes --show-labels'
# kgns='kubectl get namespaces'
# kgp='kubectl get pods'
# kgpa='kubectl get pods --all-namespaces'
# kgpall='kubectl get pods --all-namespaces -o wide'
# kgpl='kgp -l'
# kgpn='kgp -n'
# kgpsl='kubectl get pods --show-labels'
# kgpvc='kubectl get pvc'
# kgpvca='kubectl get pvc --all-namespaces'
# kgpvcw='kgpvc --watch'
# kgpw='kgp --watch'
# kgpwide='kgp -o wide'
# kgrs='kubectl get replicaset'
# kgs='kubectl get svc'
# kgsa='kubectl get svc --all-namespaces'
# kgsec='kubectl get secret'
# kgseca='kubectl get secret --all-namespaces'
# kgss='kubectl get statefulset'
# kgssa='kubectl get statefulset --all-namespaces'
# kgssw='kgss --watch'
# kgsswide='kgss -o wide'
# kgsw='kgs --watch'
# kgswide='kgs -o wide'
# kl='kubectl logs'
# kl1h='kubectl logs --since 1h'
# kl1m='kubectl logs --since 1m'
# kl1s='kubectl logs --since 1s'
# klf='kubectl logs -f'
# klf1h='kubectl logs --since 1h -f'
# klf1m='kubectl logs --since 1m -f'
# klf1s='kubectl logs --since 1s -f'
# kpf='kubectl port-forward'
# krh='kubectl rollout history'
# krsd='kubectl rollout status deployment'
# krsss='kubectl rollout status statefulset'
# kru='kubectl rollout undo'
# ksd='kubectl scale deployment'
# ksss='kubectl scale statefulset'
# l='ls -lah'
# la='ls -lAh'
# latest='$HOME/Downloads/*(om[1])'
# lgit=lazygit
# ll='ls -lh'
# ls='ls -G'
# lsa='ls -lah'
# man='nocorrect man'
# mb='make build'
# mbr='make build && make run'
# md='mkdir -p'
# mkdir='nocorrect mkdir'
# mr='make run'
# mv='nocorrect mv'
# pbl='podman build'
# pbssh='pbcopy < /Users/aj/.ssh/id_ed25519.pub'
# pcb='podman-compose build'
# pcdn='podman-compose down'
# pce='podman-compose exec'
# pcin='podman container inspect'
# pck='podman-compose kill'
# pcl='podman-compose logs'
# pclF='podman-compose logs -f --tail 0'
# pclf='podman-compose logs -f'
# pcls='podman container ls'
# pclsa='podman container ls --all'
# pco=podman-compose
# pcps='podman-compose ps'
# pcpull='podman-compose pull'
# pcr='podman-compose run'
# pcrestart='podman-compose restart'
# pcrm='podman-compose rm'
# pcstart='podman-compose start'
# pcstop='podman-compose stop'
# pcup='podman-compose up'
# pcupb='podman-compose up --build'
# pcupd='podman-compose up -d'
# pcupdb='podman-compose up -d --build'
# pib='podman image build'
# pii='podman image inspect'
# pils='podman image ls'
# pipu='podman image push'
# pirm='podman image rm'
# pit='podman image tag'
# plo='podman container logs'
# pnc='podman network create'
# pncn='podman network connect'
# pndcn='podman network disconnect'
# pni='podman network inspect'
# pnls='podman network ls'
# pnrm='podman network rm'
# ppo='podman container port'
# ppu='podman pull'
# pr='podman container run'
# prit='podman container run --interactive --tty'
# prm='podman container rm'
# 'prm!'='podman container rm --force'
# prs='podman container restart'
# pst='podman container start'
# psta='podman stop $(podman ps --quiet)'
# pstp='podman container stop'
# ptop='podman top'
# pvi='podman volume inspect'
# pvls='podman volume ls'
# pvprune='podman volume prune'
# pxc='podman container exec'
# pxcit='podman container exec --interactive --tty'
# pymg='python manage.py'
# rd=rmdir
# run-help=man
# sc-add-requires='sudo systemctl add-requires'
# sc-add-wants='sudo systemctl add-wants'
# sc-cancel='sudo systemctl cancel'
# sc-cat='systemctl cat'
# sc-daemon-reexec='sudo systemctl daemon-reexec'
# sc-daemon-reload='sudo systemctl daemon-reload'
# sc-default='sudo systemctl default'
# sc-disable='sudo systemctl disable'
# sc-disable-now='sc-disable --now'
# sc-edit='sudo systemctl edit'
# sc-emergency='sudo systemctl emergency'
# sc-enable='sudo systemctl enable'
# sc-enable-now='sc-enable --now'
# sc-failed='systemctl --failed'
# sc-get-default='systemctl get-default'
# sc-halt='sudo systemctl halt'
# sc-help='systemctl help'
# sc-hibernate='systemctl hibernate'
# sc-hybrid-sleep='systemctl hybrid-sleep'
# sc-import-environment='sudo systemctl import-environment'
# sc-is-active='systemctl is-active'
# sc-is-enabled='systemctl is-enabled'
# sc-is-failed='systemctl is-failed'
# sc-is-system-running='systemctl is-system-running'
# sc-isolate='sudo systemctl isolate'
# sc-kexec='sudo systemctl kexec'
# sc-kill='sudo systemctl kill'
# sc-link='sudo systemctl link'
# sc-list-dependencies='systemctl list-dependencies'
# sc-list-jobs='systemctl list-jobs'
# sc-list-machines='sudo systemctl list-machines'
# sc-list-sockets='systemctl list-sockets'
# sc-list-timers='systemctl list-timers'
# sc-list-unit-files='systemctl list-unit-files'
# sc-list-units='systemctl list-units'
# sc-load='sudo systemctl load'
# sc-mask='sudo systemctl mask'
# sc-mask-now='sc-mask --now'
# sc-poweroff='systemctl poweroff'
# sc-preset='sudo systemctl preset'
# sc-preset-all='sudo systemctl preset-all'
# sc-reboot='systemctl reboot'
# sc-reenable='sudo systemctl reenable'
# sc-reload='sudo systemctl reload'
# sc-reload-or-restart='sudo systemctl reload-or-restart'
# sc-rescue='sudo systemctl rescue'
# sc-reset-failed='sudo systemctl reset-failed'
# sc-restart='sudo systemctl restart'
# sc-revert='sudo systemctl revert'
# sc-set-default='sudo systemctl set-default'
# sc-set-environment='sudo systemctl set-environment'
# sc-set-property='sudo systemctl set-property'
# sc-show='systemctl show'
# sc-show-environment='systemctl show-environment'
# sc-start='sudo systemctl start'
# sc-status='systemctl status'
# sc-stop='sudo systemctl stop'
# sc-suspend='systemctl suspend'
# sc-switch-root='sudo systemctl switch-root'
# sc-try-reload-or-restart='sudo systemctl try-reload-or-restart'
# sc-try-restart='sudo systemctl try-restart'
# sc-unmask='sudo systemctl unmask'
# sc-unset-environment='sudo systemctl unset-environment'
# scu-add-requires='systemctl --user add-requires'
# scu-add-wants='systemctl --user add-wants'
# scu-cancel='systemctl --user cancel'
# scu-cat='systemctl --user cat'
# scu-daemon-reexec='systemctl --user daemon-reexec'
# scu-daemon-reload='systemctl --user daemon-reload'
# scu-default='systemctl --user default'
# scu-disable='systemctl --user disable'
# scu-disable-now='scu-disable --now'
# scu-edit='systemctl --user edit'
# scu-emergency='systemctl --user emergency'
# scu-enable='systemctl --user enable'
# scu-enable-now='scu-enable --now'
# scu-failed='systemctl --user --failed'
# scu-get-default='systemctl --user get-default'
# scu-halt='systemctl --user halt'
# scu-help='systemctl --user help'
# scu-import-environment='systemctl --user import-environment'
# scu-is-active='systemctl --user is-active'
# scu-is-enabled='systemctl --user is-enabled'
# scu-is-failed='systemctl --user is-failed'
# scu-is-system-running='systemctl --user is-system-running'
# scu-isolate='systemctl --user isolate'
# scu-kexec='systemctl --user kexec'
# scu-kill='systemctl --user kill'
# scu-link='systemctl --user link'
# scu-list-dependencies='systemctl --user list-dependencies'
# scu-list-jobs='systemctl --user list-jobs'
# scu-list-machines='systemctl --user list-machines'
# scu-list-sockets='systemctl --user list-sockets'
# scu-list-timers='systemctl --user list-timers'
# scu-list-unit-files='systemctl --user list-unit-files'
# scu-list-units='systemctl --user list-units'
# scu-load='systemctl --user load'
# scu-mask='systemctl --user mask'
# scu-mask-now='scu-mask --now'
# scu-preset='systemctl --user preset'
# scu-preset-all='systemctl --user preset-all'
# scu-reenable='systemctl --user reenable'
# scu-reload='systemctl --user reload'
# scu-reload-or-restart='systemctl --user reload-or-restart'
# scu-rescue='systemctl --user rescue'
# scu-reset-failed='systemctl --user reset-failed'
# scu-restart='systemctl --user restart'
# scu-revert='systemctl --user revert'
# scu-set-default='systemctl --user set-default'
# scu-set-environment='systemctl --user set-environment'
# scu-set-property='systemctl --user set-property'
# scu-show='systemctl --user show'
# scu-show-environment='systemctl --user show-environment'
# scu-start='systemctl --user start'
# scu-status='systemctl --user status'
# scu-stop='systemctl --user stop'
# scu-switch-root='systemctl --user switch-root'
# scu-try-reload-or-restart='systemctl --user try-reload-or-restart'
# scu-try-restart='systemctl --user try-restart'
# scu-unmask='systemctl --user unmask'
# scu-unset-environment='systemctl --user unset-environment'
# sed=gsed
# sl=ls
# su='nocorrect su'
# sudo='nocorrect sudo'
# szsh='source ~/.zshrc'
# tds=_tmux_directory_session
# tf=terraform
# tksv='tmux kill-server'
# tl='tmux list-sessions'
# tmux=_zsh_tmux_plugin_run
# tmuxconf='$EDITOR $ZSH_TMUX_CONFIG'
# tstart='tmuxinator start work'
# tstop='tmuxinator stop work'
# uvmg='uv run manage.py'
# uvr='uv run'
# uvxr='uvx run'
# vim=nvim
# which-command=whence

if status is-interactive
    # Commands to run in interactive sessions can go here
end
