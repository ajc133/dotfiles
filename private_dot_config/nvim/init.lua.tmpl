vim.g.mapleader = " "
--------------
-- Mappings --
--------------

-- disable netrw at the very start of your init.lua (strongly advised)
vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1


-- Convenience
local function map(mode, shortcut, command)
	vim.keymap.set(mode, shortcut, command, { noremap = true, silent = true })
end

local function nmap(shortcut, command)
	map('n', shortcut, command)
end

local function imap(shortcut, command)
	map('i', shortcut, command)
end

local function vmap(shortcut, command)
	map('v', shortcut, command)
end

-- Normal mode mappings
-- TAB in normal mode will move to text buffer
nmap('<TAB>', ':bnext<CR>')
-- SHIFT-TAB will go back
nmap('<S-TAB>', ':bprevious<CR>')
-- Better window navigation (ctrl + vim-direction)
nmap('<C-h>', '<C-w>h')
nmap('<C-j>', '<C-w>j')
nmap('<C-k>', '<C-w>k')
nmap('<C-l>', '<C-w>l')
nmap('<Leader>w', ':write<cr>')
nmap('<Leader>x', ':bdelete<cr>')
nmap('<Leader>p', '$p<cr>') -- Paste to end of line
nmap('<Leader>d', '"_d') -- Blackhole register
nmap('<Leader>y', '"+y') -- Copy to system clipboard

-- Search-replace in file
-- nmap('<Leader>s', ':%s/\\<<C-r><C-w>\\>/') -- Getting invalid escape sequence
vim.cmd(':nnoremap <Leader>s :%s/<C-r><C-w>/') -- Matches word
vim.cmd(':nnoremap <Leader>a :%s/<C-r><C-w>/') -- Matches WORD. Might be a pain


-- Insert mode mappings

-- <TAB>: completion.
imap('<expr><TAB>', 'pumvisible() ? "\\<C-n>" : "\\<TAB>"')
-- Better nav for omnicomplete
imap('<expr><c-j>', '("\\<C-n>")')
imap('<expr><c-k>', '("\\<C-p>")')
-- <TAB>: completion
imap('<expr><TAB>', 'pumvisible() ? "\\<C-n>" : "\\<TAB>"')

-- Visual mode mappings

vmap('<', '<gv')
vmap('>', '>gv')

--------------
-- Settings --
--------------

vim.opt.termguicolors = true
vim.opt.background = 'dark'
vim.cmd('set hidden')
vim.opt.mouse = 'a'

vim.opt.cmdheight = 2
vim.opt.completeopt = { 'menuone', 'noselect' }
vim.opt.number = true
vim.opt.updatetime = 50
vim.opt.splitbelow = true
vim.opt.splitright = true
vim.opt.scrolloff = 12

-- Search options
vim.opt.hlsearch = false
vim.opt.ignorecase = true
vim.opt.smartcase = true

vim.opt.autoindent = true

vim.opt.list = true
vim.opt.listchars = { tab = '> ', trail = '·', nbsp = '+' }

------------------
-- Autocommands --
------------------

-- Whenever plugins.lua is updated, re-compile
vim.cmd([[
augroup packer_auto_compile
  autocmd!
  autocmd BufWritePost */nvim/lua/plugins.lua source <afile> | PackerCompile
augroup END
]])

-- Dotfile management
-- Run chezmoi apply whenever you save a dotfile
-- Auto source when writing to init.vim alternatively you can run :source $MYVIMRC
vim.cmd([[
augroup dotfiles
  au! BufWritePost ~/.local/share/chezmoi/* ! chezmoi apply
  au! BufWritePost $MYVIMRC source %
augroup END
]])

-- Filetype settings
vim.api.nvim_create_augroup("bufcheck", { clear = true })

-- Set filetype for templates to their base filetype
vim.cmd('au BufRead,BufNewFile *.lua.tmpl setfiletype lua')
vim.cmd('au BufRead,BufNewFile *.sh.tmpl setfiletype bash')
vim.cmd('au BufRead,BufNewFile *.yml setfiletype yaml.ansible')

-- Remove trailing spaces in yaml
vim.cmd([[
augroup dotfiles
  au! BufWritePre *.yaml %s/\s\+$//e
  au! BufWritePre *.yml %s/\s\+$//e
augroup END
]])

-- Highlight yank
vim.api.nvim_create_autocmd(
	{ "TextYankPost" },
	{ pattern = { "*" }, command = "lua require'vim.highlight'.on_yank()" }
)

-- Highlight all search matches only while typing
vim.cmd([[
augroup vimrc-incsearch-highlight
  autocmd!
  autocmd CmdlineEnter /,\? :set hlsearch
  autocmd CmdlineLeave /,\? :set nohlsearch
augroup END
]])

-------------
-- Plugins --
-------------

-- Installs plugins
require('plugins')

-- colorschemin'
vim.g.material_style = "darker" -- when colorscheme == material
vim.cmd('colorscheme {{ .nvim_colorscheme }}')

-- Configure LSP
require('lsp')
require("mason").setup()
vim.cmd('let g:go_fmt_command = "gofmt"')

-- Telescope fuzzy finder
require('telescope').setup {
	defaults = {
		-- Default configuration for telescope goes here:
		-- config_key = value,
		mappings = {
			i = {
				-- map actions.which_key to <C-h> (default: <C-/>)
				-- actions.which_key shows the mappings for your picker,
				-- e.g. git_{create, delete, ...}_branch for the git_branches picker
				["<C-h>"] = "which_key"
			}
		}
	},
	colorscheme = 'auto',
}

-- [[ Configure Treesitter ]]
-- See `:help nvim-treesitter`
require('nvim-treesitter.configs').setup {
	-- Add languages to be installed here that you want installed for treesitter
	ensure_installed = { 'c', 'cpp', 'go', 'lua', 'python', 'rust', 'javascript', 'typescript', 'help', 'vim' },

	highlight = { enable = true },
	indent = { enable = true, disable = { 'python' } },
	incremental_selection = {
		enable = true,
		keymaps = {
			init_selection = '<c-space>',
			node_incremental = '<c-space>',
			scope_incremental = '<c-s>',
			node_decremental = '<c-backspace>',
		},
	},
	textobjects = {
		select = {
			enable = true,
			lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
			keymaps = {
				-- You can use the capture groups defined in textobjects.scm
				['aa'] = '@parameter.outer',
				['ia'] = '@parameter.inner',
				['af'] = '@function.outer',
				['if'] = '@function.inner',
				['ac'] = '@class.outer',
				['ic'] = '@class.inner',
			},
		},
		move = {
			enable = true,
			set_jumps = true, -- whether to set jumps in the jumplist
			goto_next_start = {
				[']m'] = '@function.outer',
				[']]'] = '@class.outer',
			},
			goto_next_end = {
				[']M'] = '@function.outer',
				[']['] = '@class.outer',
			},
			goto_previous_start = {
				['[m'] = '@function.outer',
				['[['] = '@class.outer',
			},
			goto_previous_end = {
				['[M'] = '@function.outer',
				['[]'] = '@class.outer',
			},
		},
		swap = {
			enable = true,
			swap_next = {
				['<leader>a'] = '@parameter.inner',
			},
			swap_previous = {
				['<leader>A'] = '@parameter.inner',
			},
		},
	},
}

-- File tree
require("nvim-tree").setup({
	sort_by = "case_sensitive",
	view = {
		adaptive_size = true,
		mappings = {
			list = {
				{ key = "u", action = "dir_up" },
			},
		},
	},
	renderer = {
		group_empty = true,
	},
	filters = {
		dotfiles = true,
	},
})


-- Gitsigns
-- See `:help gitsigns.txt`
require('gitsigns').setup {
	signs = {
		add = { text = '+' },
		change = { text = '~' },
		delete = { text = '_' },
		topdelete = { text = '‾' },
		changedelete = { text = '~' },
	},
}

-- Turn on lsp status information
require('fidget').setup()

-- nvim-cmp setup
local cmp = require 'cmp'
local luasnip = require 'luasnip'

cmp.setup {
	snippet = {
		expand = function(args)
			luasnip.lsp_expand(args.body)
		end,
	},
	mapping = cmp.mapping.preset.insert {
		['<C-Space>'] = cmp.mapping.confirm(),
		['<C-d>'] = cmp.mapping.scroll_docs(-4),
		['<C-f>'] = cmp.mapping.scroll_docs(4),
		['<CR>'] = cmp.mapping.confirm {
			behavior = cmp.ConfirmBehavior.Replace,
			select = true,
		},
		['<Tab>'] = cmp.mapping(function(fallback)
			if cmp.visible() then
				cmp.select_next_item()
			elseif luasnip.expand_or_jumpable() then
				luasnip.expand_or_jump()
			else
				fallback()
			end
		end, { 'i', 's' }),
		['<S-Tab>'] = cmp.mapping(function(fallback)
			if cmp.visible() then
				cmp.select_prev_item()
			elseif luasnip.jumpable(-1) then
				luasnip.jump(-1)
			else
				fallback()
			end
		end, { 'i', 's' }),
	},
	sources = {
		{ name = 'nvim_lsp' },
		{ name = 'luasnip' },
	},
}

---------------------
-- Plugin Mappings --
---------------------

-- Telescope
local builtin = require('telescope.builtin')
nmap('<Leader>fb', builtin.buffers)
nmap('<Leader>ff', builtin.find_files)
nmap('<Leader>fg', builtin.live_grep)
nmap('<Leader>fh', builtin.help_tags)
nmap('<Leader>fw', builtin.grep_string)

-- Git - vim-fugitive
nmap('<Leader>gb', ':Git blame<cr>') -- git blame %
nmap('<Leader>gw', ':Gwrite<cr>') -- git add %
nmap('<Leader>gc', ':Git commit<cr>') -- git commit
nmap('<Leader>grm', ':Gremove<cr>') -- git rm %
nmap('<Leader>gmv', ':Gmove ') -- git mv <path>

vim.cmd("let g:fugitive_gitlab_domains = {'ssh://git.2nd.io': 'https://git.2nd.io'}")

nmap('<Leader>o', ':NvimTreeFindFileToggle<CR>') -- open file explorer
