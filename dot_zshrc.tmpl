# Uncomment to print startup time profiling
# zmodload zsh/zprof
autoload zmv zcalc
DISABLE_AUTO_UPDATE="true"

export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_TYPE=en_US.UTF-8
export PAGER="less -r"

# https://sw.kovidgoyal.net/kitty/shell-integration/#manual-shell-integration
if test -n "$KITTY_INSTALLATION_DIR"; then
    export KITTY_SHELL_INTEGRATION="enabled"
    autoload -Uz -- "$KITTY_INSTALLATION_DIR"/shell-integration/zsh/kitty-integration
    kitty-integration
    unfunction kitty-integration
fi

export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$HOME/workspace/bin:$HOME/bin:/usr/local/go/bin:/usr/lib/cargo/bin:$HOME/.ssi/bin:$HOME/go/bin:$HOME/.fly/bin:/opt/nvim-linux64/bin:$PATH

ssh-add

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
export ZSH_TMUX_AUTOSTART="false"
export ZSH_TMUX_UNICODE="true"
{{ if not (eq .chezmoi.os "darwin") -}}
{{ if eq .chezmoi.osRelease.id "manjaro" -}}
{{ end -}}
{{ end -}}

# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# and https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes
ZSH_THEME={{ .zsh_theme }}

# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
plugins=(
    asdf
    direnv
    docker
    docker-compose
    fzf-tab
    git
    httpie
    kubectl
    podman
    poetry
    tmux
    vi-mode
    you-should-use
    zsh-autosuggestions
    zsh-syntax-highlighting
)

# Make cargo use git
export CARGO_NET_GIT_FETCH_WITH_CLI=true

export EDITOR="nvim"
export XDG_CONFIG_HOME="$HOME/.config"
export ANSIBLE_FACTS_DIR="$HOME/.local/share/ansible/facts"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# vi-style keybindings
bindkey -v

# Edit current command with $EDITOR
bindkey -M vicmd ' ' edit-command-line

{{ if eq .chezmoi.os "darwin" }}
if type brew &>/dev/null
then
  fpath=(
        $(brew --prefix)/share/zsh/site-functions
        $fpath
  )
fi
{{ end }}

fpath=(
    ~/.zsh 
    $fpath
)

# History settings
HIST_STAMPS="yyyy-mm-dd" # oh_my_zsh specific
HISTFILESIZE=1000000000
HISTSIZE=1000000000
setopt HIST_FIND_NO_DUPS

# Oh-My-ZSH
source $ZSH/oh-my-zsh.sh

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# User configuration

# solarized black on solarized yellow
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#002b36,bg=#b58900,bold,underline'

# Don't me to use aliases
export YSU_HARDCORE=0

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
alias ad="ansible-doc"
alias agrep="alias | grep -i"
alias al="ansible-lint"
alias ap="ansible-playbook"
alias avd="ansible-vault decrypt"
alias ave="ansible-vault edit"
alias avv="ansible-vault view"
alias ch="chezmoi"
alias cht="~/bin/cht.sh"
alias chx="chmod +x"

# Copied from docker-compose plugin
alias pcb='podman-compose build'
alias pcdn='podman-compose down'
alias pce='podman-compose exec'
alias pck='podman-compose kill'
alias pcl='podman-compose logs'
alias pclF='podman-compose logs -f --tail 0'
alias pclf='podman-compose logs -f'
alias pco='podman-compose'
alias pcps='podman-compose ps'
alias pcpull='podman-compose pull'
alias pcr='podman-compose run'
alias pcrestart='podman-compose restart'
alias pcrm='podman-compose rm'
alias pcstart='podman-compose start'
alias pcstop='podman-compose stop'
alias pcup='podman-compose up'
alias pcupb='podman-compose up --build'
alias pcupd='podman-compose up -d'
alias pcupdb='podman-compose up -d --build'

alias digs="dig +noall +answer"
alias dps='docker ps --format "{{`{{.Names}}`}}\t{{`{{.ID}}`}}\t{{`{{.State}}`}}\t{{`{{.Status}}`}}" | column -t'
alias fixmerge="git diff --name-only | uniq | xargs nvim"
alias gdh="git diff HEAD^"
alias gdm="git diff $(git_main_branch)"
alias gs="git status"
alias hgrep="history | grep -i"
alias -g latest='$HOME/Downloads/*(om[1])'
alias lgit="lazygit"
{{ if eq .chezmoi.os "linux" }}
alias open="xdg-open"
alias pbcopy="xclip -i -selection clipboard"
alias pbpaste='xclip -selection clipboard -o'
alias qrcode="qrencode -s 6 -l H -o /tmp/qrcode.png && eog /tmp/qrcode.png && rm /tmp/qrcode.png && clear"
alias rg="rg --colors=match:style:underline"
alias sai="sudo apt install"
alias sau="sudo apt update"
{{ end }}
alias pbssh="pbcopy < $HOME/.ssh/id_ed25519.pub"
{{ if eq .chezmoi.os "darwin" }}
alias sed="gsed"
alias tstart="tmuxinator start work"
alias tstop="tmuxinator stop work"
{{ end }}
alias mb="make build"
alias mbr="make build && make run"
alias mr="make run"
alias sl="ls"
alias tf="terraform"
alias vim="nvim"
alias anvim='NVIM_APPNAME="astronvim" nvim'
alias szsh="source ~/.zshrc"
alias ezsh="vim ~/.zshrc"
alias pymg="python manage.py"
alias http="curlie"

lastdl() {
    LS_COMMAND='ls'

    # Use gls (gnu-ls) on Mac, since it has the quoting-style arg
    if command -v gls &>/dev/null
    then
        LS_COMMAND='gls'
    fi

    $LS_COMMAND -l --quoting-style=shell-always --directory --sort=time $HOME/Downloads/* | head -n 1 | awk '{print $NF}'
}

# Open files that contain a string
function vimrg () {
  rg -l "$1" | xargs nvim
}

function urldecode () {
  arg=""
  if [[ -n "$1" ]]; then
      arg=$1
  else
      arg="$(cat)"
  fi
  python3 -c 'import sys; from urllib.parse import unquote; print(unquote(sys.argv[1]));' $arg 
}

function nb () {
  open "https://netbox.prod.2nd.io/search/?q=${1}"
}

function urlencode () {
  arg=""
  if [[ -n "$1" ]]; then
      arg=$1
  else
      arg="$(cat)"
  fi
  python3 -c "import sys; from urllib.parse import quote; print(quote(sys.argv[1]));" $arg 
}


# Fuzzy find branch switching
unalias gsw
function gsw () {
  if [ -z "$1" ]
  then
    git switch $(git branch --sort=-committerdate | fzf | tr -d '[:space:]') 
  else
    git switch "$1"
  fi
}

# "less that" previous command (reruns it though)
lt() {
  cmd=$(fc -ln -1)
  cmdl="${cmd} | less"
  eval $cmdl
}

qr() {
    # Check if qrencode is installed
    if ! command -v qrencode &> /dev/null; then
        echo "Error: qrencode is not installed. Please install qrencode before using this function."
        return 1
    fi

    # Check if display (ImageMagick) is installed
    if ! command -v display &> /dev/null; then
        echo "Error: ImageMagick (display) is not installed. Please install ImageMagick before using this function."
        return 1
    fi

    # Generate QR code and display it
    qrencode "$1" -o - | display
}

{{ if eq .chezmoi.os "darwin" }}
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
{{ end }}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Uncomment to print startup time profiling
# zprof
